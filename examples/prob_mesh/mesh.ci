mainmodule mesh {
    extern module unionFindLib;

    readonly CProxy_UnionFindLib libProxy;
    readonly CProxy_Main mainProxy;
    readonly int64_t MESH_SIZE;
    readonly int64_t MESHPIECE_SIZE;
    readonly float PROBABILITY;
    readonly int64_t numMeshPieces;
    readonly int64_t batchSize;

    mainchare Main {
        entry Main(CkArgMsg *m);
        entry void doneInveretdTree();
        entry void doneFindComponents();
        entry [reductiontarget] void donePrinting();
    }

    array[1D] MeshPiece {
      entry MeshPiece();
      entry void initializeLibVertices();
      entry [reductiontarget] void doWork();
      entry void allowNextBatch();
      /*
      entry [reductiontarget] void doWork() {
        // CkPrintf("Starting doWork()\n");
        // printVertices();
        // libPtr->printVertices();
        serial {
          totalReqs = 0;
        }
        for (i = 0; i < numMyVertices; i++) {
          // check probability for east edge
          serial {
            CkPrintf("in doWork() i: %ld\n", i);
          }
          serial {
            float eastProb = 0.0;
            if (myVertices[i].y + 1 < MESH_SIZE) {
              eastProb = checkProbabilityEast(myVertices[i].y, myVertices[i].y+1);

              if (eastProb < PROBABILITY) {
                // edge found, make library union_request call
                int eastID = (myVertices[i].x*MESH_SIZE) + (myVertices[i].y+1);
                libPtr->union_request(myVertices[i].id, eastID);
                totalReqs++;
              }
            }
          }

          // check probability for south edge
          serial {
            float southProb = 0.0;
            if (myVertices[i].x + 1 < MESH_SIZE) {
              southProb = checkProbabilitySouth(myVertices[i].x, myVertices[i].x+1);

              if (southProb < PROBABILITY) {
                // edge found, make library union_request call
                int southID = (myVertices[i].x+1)*MESH_SIZE + myVertices[i].y;
                libPtr->union_request(myVertices[i].id, southID);
                totalReqs++;
              }
            }
          }

          if (totalReqs >= batchSize) {
          }
        }
        serial {
          CkPrintf("Done doWork() myIndex: %d myPE: %d totalReqs: %ld\n", thisIndex, CkMyPe(), totalReqs);
        }
      }
      */

      entry void printVertices();
    }

    //array[1D] UnionFindLib;
};
